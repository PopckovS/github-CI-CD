# -------------------------------------------------------------
# Githab Actions Part-1 
# Popckov Sergey
# -------------------------------------------------------------

# ===== Название ======
# В отличии от названия файла, название "name" имеет значение,
name: My-Actions-1

# Блок для хранения настроек, и глобальных переменных которые
# далее можно использовать в заданиях.
# ${{github.sha}} - Доступ к уникальному SHA который генерируется
# специально для каждого коммита.
env:
  # Дали название проекту
  APPLICATION_NAME: "MyFlask"
  # Назвали пакет
  DEPLOY_PACKAGE_NAME: "flask_deploy_version-${{github.sha}}"


# ===== Когда запускать ======
# Контролирует когда будет запускаться этот файл, на "push" или
# на "pull_request" 
on:
  
  # Тут же можно конкретизировать, в какой момент запускать и 
  # для какой ветки. Запускать при событии "push" в ветку "main"
  push:
    branches: [ main ]


# ===== Задания для работы ======
# Тут описаны задания которые будут выполняться при запуске файла,
# задачи могут выполняться как параллельно так и последовательно.
jobs:
  
  
  # Первое задание 
  # Это задача, она может называться как угодно, каждая такая задача
  # запускается на отдельной виртуальной машине, которую создает github 
  # и тут дальше описывается работа для Docker в котором будет выполнятся
  # вся работа этого задания.  
  my_testing:
    # На какой ОС будет запущено задание, к примеру можно запустить на
    # runs-on: ubuntu-latest последней ОС или на указанной точно.
    runs-on: ubuntu-18.04

    # Шаги для работы в задании.   
    steps:

      # Название конкретного шага
      - name: Print Message 1
        # Действие внутри конкретного шага, по сути пишим обычный shell         
        run: echo "Hello World from my_testing"

      # Обращение к глобальным переменным что определены в блоке env
      # делается так: ${{env.APPLICATION_NAME}}
      - name: Print APPLICATION_NAME
        run: |
          echo "Hello 1"
          echo "Hello 2"
          echo "APPLICATION_NAME: ${{env.APPLICATION_NAME}}"

      # Новое задание, для показа содержания директории, в результате
      # мы ничего не увидим, потому что наш репозиторий хоть и создан
      # но не закинут в контейнер докера.
      - name: List current folder before clone
        run: ls -la

      # Новое задание на копирование нашего репозитория в контейнер
      # докера, сделать это можно при помощи специального зарезервированной
      # команды "action/checkout@v2"
      - name: Git clone my repo
        uses: actions/checkout@v2

      # нова запускаем команду на просмотр содержимого и увидим что
      # все репозитории были скопированы.
      - name: List current folder after clone
        run: ls -la

      # Добавили команду для просмотра есть ли тут сервис
      # AWS от Amazon, есть ли он в контейнере по дефолту ?
      - name: Test some package if the are here №1
        run: aws --version

      # Добавили команду для просмотра есть ли тут библиотека zip
      - name: Test some package if the are here №2
        run: zip


  # Второе задание  
  my_deploy: 
    runs-on: ubuntu-18.04
    needs: [my_testing]
    steps:
      - name: Print Message 2
        run: echo "Hello World from my_deploy"

      - name: Print DEPLOY_PACKAGE_NAME
        run: |
          echo "Hello 3"
          echo "Hello 4"
          echo "DEPLOY_PACKAGE_NAME : ${{env.DEPLOY_PACKAGE_NAME}}"




